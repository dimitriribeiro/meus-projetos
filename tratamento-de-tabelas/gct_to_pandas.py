# -*- coding: utf-8 -*-
"""gct-to-pandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dRdhVMbGjrL06bzR63bYPRqHB9c0wcdK
"""

import pandas as pd

class Gct:

  #NOME_DO_ARQUIVO -> O TÍTULO QUE VOCE QUER QUE ELE TENHA QUANDO SE TORNA CSV
  #GCT -> CAMINHO COMPLETO DO ARQUIVO GCT

  def __init__(self, nome_arquivo, GCT):
    self.nome_arquivo = nome_arquivo
    self.GCT = GCT
  def to_df(self):

    #LENDO GCT

    with open(self.GCT, 'r') as file:
      gct_bruto = file.readlines()

    #REMOVENDO SEPARADORES
    linhas_gct = []
    for linha in gct_bruto:
      linhas_gct.append(linha.split('\t'))
    for sep in linhas_gct:
      s = sep[-1]
      sep.pop(-1)
      sep.append(s.replace('\n',''))

    #CRIANDO DF

    dados_gct = {}

    #CRIANDO COLUNAS

    for coluna in linhas_gct[2]:
        dados_gct[coluna.upper()] = []

    #ADICIONANDO LINHAS

    for linha in linhas_gct[3:]:
        l = list(dados_gct.keys())
        for i, dado in enumerate(linha):
          dados_gct[l[i]].append(dado)
    df_gct = pd.DataFrame(dados_gct)
    
    for coluna in df_gct:
        if 'GTEX' in coluna:
          df_gct[coluna] = pd.to_numeric(df_gct[coluna])
          df_gct[coluna] = df_gct[coluna].astype('float32')
    return df_gct

  #BAIXANDO ARQUIVO CSV
  def download(self, sep=';', index=False):
    Gct(self.nome_arquivo, self.GCT).to_df().to_csv(f'{self.nome_arquivo}.csv', 
                                                    sep=sep, 
                                                    index=index)
    
if __name__ == '__main__':
  nome_arquivo = input('Qual o nome que deseja para o arquivo: ')
  caminho = input('Qual o caminho completo do arquivo: ')
  arquivo = Gct(nome_arquivo, caminho)
  df = arquivo.to_df()
  arquivo.download()